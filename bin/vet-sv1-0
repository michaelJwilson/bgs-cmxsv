#!/usr/bin/env python
import os
import glob
import numpy as np
import astropy.io.fits as fits
import pylab as pl
import astropy
import matplotlib.pyplot as plt

from   pathlib import Path
from   astropy.table import Table, vstack, join

# https://github.com/desihub/desitarget/blob/master/py/desitarget/sv1/data/sv1_targetmask.yaml                                                                                                                                                
from   desitarget.sv1.sv1_targetmask import desi_mask as sv1_desi_mask
from   desitarget.sv1.sv1_targetmask import bgs_mask as sv1_bgs_mask
from   pkg_resources                 import resource_filename
from   badz                          import is_badz
from   desitarget.sv1.sv1_targetmask import bgs_mask as sv1_bgs_mask
from   get_zbest                     import get_zbest

##
dX2_lim     = 20.
verbose     = True

truth_cache = {}

conds       = Table.read(resource_filename('bgs-cmxsv', 'dat/bgs-blanc-exposures.fits'))
aexps       = Table.read(resource_filename('bgs-cmxsv', 'dat/sv1-exposures.fits'))

def good_tile(tileid, night, expid, verbose=False):
    tile    = conds[(conds['TILEID'] == tileid)]
    tile    = tile[tile['NIGHT'] == night]
    tile    = tile[tile['EXPID'] == expid]
    
    if len(tile) == 0:
        raise ValueError('Invalid pairing ({}, {})'.format(tileid, night))
    
    good    = tile['GFA_TRANSPARENCY_MED'] > 0.95
    good    = good & (tile['GFA_FWHM_ASEC_MED'] < 1.8)

    if good & verbose:
        print('{} \t {} \t {:.4f} \t {:.4f}'.format(tileid, night, tile['GFA_TRANSPARENCY_MED'][0], tile['GFA_FWHM_ASEC_MED'][0]))
        
    return  good
        
def get_truth(tileid):
  if tileid not in truth_cache.keys():
    truth       = Table.read('/global/homes/m/mjwilson/desi/SV1/spectra/truth/bgs_deep_truth_{}.fits'.format(tileid))
    truth.sort('TARGETID')

    truth_cache[tileid] = truth
    
  else:
    truth = truth_cache[tileid]

  return  truth

# types   = list(sv1_bgs_mask.names())
types     = ['BGS_BRIGHT', 'BGS_FAINT', 'BGS_FAINT_EXT', 'BGS_FIBMAG', 'BGS_LOWQ']

ntypes    = len(types)

zbests    = glob.glob('/global/homes/m/mjwilson/desi/SV1/spectra/exposures/NEXP1/*/*/zbest-*')

results   = {}

for zbest in zbests:
    # Single exposures:  zbest-20201218-0-00068644.fits
    parts   = zbest.split('/')[-1].replace('.fits', '').split('-')

    expid   = np.int(parts[-1])
    night   = np.int(parts[-3])

    tileid  = conds['TILEID'][conds['EXPID'] == expid]
    
    if len(tileid) == 0:
        print('Skipping expid. {}.'.format(expid))        
        continue

    tileid  = tileid[0]

    try:
        # Limited to assigned, working bgs.
        zbest   = get_zbest(zbest, exps=aexps, lunar=True)

    except:
        print('Failed to retrieve {}.'.format(zbest))
        continue
        
    truth   = get_truth(tileid)

    is_good = good_tile(tileid, night, expid)

    if not is_good:
        continue

    ntargets = {}
    ngoodz   = {}
    
    for t in types:
        ntargets[t] = np.count_nonzero((zbest['SV1_BGS_TARGET'] & sv1_bgs_mask[t]) != 0)
            
    badz    = is_badz(zbest, dX2_lim=dX2_lim, verbose=verbose, summary=False)
    zbest   = zbest[~badz]

    for t in types:
        ngoodz[t] = np.count_nonzero((zbest['SV1_BGS_TARGET'] & sv1_bgs_mask[t]) != 0)    
    
    # Limit to certain bgs good redshifts.
    zbest   = zbest[np.isin(zbest['TARGETID'], truth['TARGETID'])]

    # Handle fluctuating fibstatus in zbest.
    truth   = truth[np.isin(truth['TARGETID'], zbest['TARGETID'])]

    if expid in results.keys():        
        zbest_stack    = results[expid][3]
        truth_stack    = results[expid][4]

        ntargets_stack = results[expid][5]
        ngoodz_stack   = results[expid][6]

        for t in types:
            ntargets[t] += ntargets_stack[t]
            ngoodz[t]   +=   ngoodz_stack[t]
            
        del results[expid]
        
        results[expid] = (tileid, night, expid, vstack((zbest_stack, zbest)), vstack((truth_stack, truth)), ntargets, ngoodz)

    else:
        results[expid] = (tileid, night, expid, zbest, truth, ntargets, ngoodz)

#
keys   = np.array(list((results.keys())))
ints   = np.arange(len(keys))
                       
inplot = ints[(ints % 5) == 0].max()
keys   = keys[ints < inplot]

nrows  = np.int(len(ints) / 5)

print(keys)
print(nrows)

fig, axes = plt.subplots(nrows, 5, figsize=(30, 5 * nrows))
fig.suptitle(r'BGS SV1 $(\Delta \chi^2 > {:.0f})$'.format(dX2_lim), fontsize=35, y=0.94)

plt.subplots_adjust(wspace=0.4, hspace=0.4)

key    = 0

colors = plt.rcParams['axes.prop_cycle'].by_key()['color']

for i in range(nrows):
  for j in range(5):
    (tileid, night, expid, zbest, truth, ntargets, ngoodz) = results[keys[key]]
    
    zbest.sort('TARGETID')
    truth.sort('TARGETID')
    
    assert  np.all(zbest['TARGETID'] == truth['TARGETID'])

    zeffs = {}
    
    for tt, c in zip(types, colors):                                                                                                                                                                                                          
        cut = (zbest['SV1_BGS_TARGET']  & sv1_bgs_mask[tt]) != 0    

        axes[i,j].plot(truth['Z'][cut], zbest['Z'][cut], c=c, marker='.', lw=0.0, markersize=2)

        zeffs[tt] = '{}{:.1f}%\n'.format(tt.ljust(25), 100. * ngoodz[tt] / ntargets[tt])
        
    axes[i,j].text(0.05, 1.9, s='Moon alt.    {:.2f}\nMoon illum. {:.2f}\nMoon sep.   {:.2f}'.format(zbest['MOONALT'][0], zbest['MOONFRAC'][0], zbest['MOONSEP'][0]), fontsize=8., verticalalignment='top')
    axes[i,j].text(0.05, 1.5, s='$b$-Depth   {:.2f}\n$r$-Depth   {:.2f}\n$z$-Depth   {:.2f}'.format(np.median(zbest['B_DEPTH']), np.median(zbest['R_DEPTH']), np.median(zbest['Z_DEPTH'])), fontsize=8., verticalalignment='top')
    axes[i,j].text(0.05, 1.1, s='Exptime   {:.2f}\n\nTransparency   {:.3f}\nPSF FWHM   {:.3f}'.format(np.median(zbest['EXPTIME']), np.median(zbest['GFA_TRANSPARENCY_MED']), np.median(zbest['GFA_FWHM_ASEC_MED'])),\
                                                                                                      fontsize=8., verticalalignment='top')
    
    label = ''.join([zeffs[x] for x in types])
    
    axes[i,j].text(0.30, 1.9, s=label, fontsize=8., verticalalignment='top')
    
    axes[i,j].set_title('{:08d}:  {} on {}'.format(expid, tileid, night), fontsize=9)
        
    axes[i,j].set_xlim(+0.0, 0.6)
    axes[i,j].set_ylim(-0.1, 2.0)

    axes[-1,j].set_xlabel(r'$z_{\rm deep}$')

    key += 1
    
  axes[i, 0].set_ylabel(r'$z_{\rm exposure}$')
  
pl.savefig('plot.pdf')
